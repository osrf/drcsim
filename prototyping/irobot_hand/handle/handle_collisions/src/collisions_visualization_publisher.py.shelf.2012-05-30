#!/usr/bin/env python

import roslib; roslib.load_manifest('handle_collisions')
import rospy

from sensor_msgs.msg import JointState
from handle_msgs.msg import HandleSensors
from handle_msgs.msg import HandleSensorsCalibrated
from handle_msgs.msg import Finger
from handle_msgs.msg import HandleCollisions
from handle_msgs.msg import Collision

from visualization_msgs.msg import *

import math
import numpy
import string


marker_array_msg = None
publisher = None

DEBUG = True

def incollisions(val, collisions):
        for collision in collisions:
                if val == collision.sensor_id:
                        return True
        return False

def getcollision(val, collisions):
        for collision in collisions:
                if val == collision.sensor_id:
                        return collision
        return None

def callback(data):
	global marker_array_msg
	global publisher
        
        
        
        
        
        for i in range(120):
		marker = Marker()
                marker.ns = "tactile_display"
                marker.id = i
                #marker.header.frame_id = '/base_link'
                marker.type = marker.CUBE #SPHERE
                marker.lifetime = rospy.Duration(0.01)
                
                collision = getcollision(i, data.collisions)

                if collision:
                        marker.header.frame_id = '/'+collision.frame_id
                        marker.action = marker.ADD
                        marker.scale.x = 0.01
                        marker.scale.y = 0.01
                        marker.scale.z = 0.01
                        marker.color.a = 1.0
                        marker.color.r = 1.0
                        marker.color.g = 1.0
                        marker.color.b = 0.0
                        marker.pose.orientation.w = 1.0
                        marker.pose.position.x = collision.x
                        marker.pose.position.y = collision.y
                        marker.pose.position.z = collision.z
                        #else:
                        #        marker.action = marker.DELETE
                
                        marker_array_msg.markers.append(marker)

	# # Renumber the marker IDs
	# id = 0
	# for m in marker_array_msg.markers:
	# 	m.id = id
	# 	id += 1

	publisher.publish(marker_array_msg)
	#print "published markers"

if __name__ == '__main__':
    
	""" Create a HandleCollisions object which we use to publish the current state of the collisions. """

	marker_array_msg = MarkerArray()
	
	rospy.init_node('collisions_visualization_publisher')

	publisher = rospy.Publisher('/visualization_marker_array', MarkerArray)

	rospy.Subscriber("/handle/events/collisions", HandleCollisions, callback)

	rospy.loginfo(rospy.get_name() + " node initialized, awaiting orders ...")
        
        rospy.spin()
        # r = rospy.Rate(100)
        # while not rospy.is_shutdown():
        #         publisher.publish(marker_array_msg)
        #         r.sleep()
