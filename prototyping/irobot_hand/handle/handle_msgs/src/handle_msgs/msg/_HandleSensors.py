"""autogenerated by genmsg_py from HandleSensors.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import handle_msgs.msg
import std_msgs.msg

class HandleSensors(roslib.message.Message):
  _md5sum = "acfe397742c94d6763fec1f34765a63e"
  _type = "handle_msgs/HandleSensors"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# All of the sensors on the HANDLE hand.
#
# NOTE: In general, the order of the arrays is: [F1, F2, F3, F3 Ant., Spread].
# Where: F1 is analogous to your index finger, F2 is analogous to your 
# middle finger, F3 is analogous to your thumb, F3 Ant. is the antagonistic 
# motor for F3, and Spread is the motor which controls the rotation of F1 and
# F2.
#

# Currently only used for time stamp.  Time stamp set from Overo's clock.
# Not guaranteed to be in sync with current time.
Header header

# The hall effect sensor on the finger motors.  
# 24 counts per motor revolution x 300 revolutions for one full finger motion.
# (Fully open to fully closed).
# [F1, F2, F3, F3 Ant.]
int32[4] motorHallEncoder

# The temperature of the finger motor windings, in Celsius.
# [F1, F2, F3, F3 Ant.]
float32[4] motorWindingTemp

# The air temperature as measured inside the housing, in Celsius.
float32 airTemp

# The level of the 33 Volt supply.
#float32 volts33

# The level of the 12 Volt supply.
#float32 volts12

# The level of the 48 Volt supply.
#float32 volts48

# The motor velocity in RPM.  (Hall encoder ticks per minute)
# [F1, F2, F3, F3 Ant.]
int32[4] motorVelocity

# The temperature of the motor housing, in Celsius.
# [F1, F2, F3, F3 Ant., Spread]
float32[5] motorHousingTemp

# The motor current.
# [F1, F2, F3, F3 Ant., Spread]
float32[5] motorCurrent

# The tactile array for each finger.  In units of kPa.
# [F1, F2, F3]
# Note there are 12 proximal and 10 distal sensors.
Finger[3] fingerTactile

# The tactile array for the palm.  In units of kPa.
float32[48] palmTactile

# The encoder on the F1 / F2 rotation.
# Approx. 768 ticks to rotate the fingers 90 degrees.
int32 fingerSpread

# The proximal joint angle.  Approx 2.84 ticks per degree.
# [F1, F2, F3]
int32[3] proximalJointAngle

# The finger distal joint flexture angle
# [F1, F2, F3]
# Note there are 4 readings on either side of the joint.
Finger[3] distalJointAngle

# The cable tension in F1 and F2.
# [F1, F2]
#CableTension[2] cableTension

# The dynamic PVDF sensors in each finger.
# [F1, F2, F3]
# Note there are 3 sensors on each finger link.
#Finger[3] fingerPVDF

# The dynamic PVDF sensors in the palm.
#float32[4] palmPVDF

# The accelerometer in each finger.  units?  axes?
# [F1, F2, F3]
geometry_msgs/Vector3[3] fingerAcceleration

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: handle_msgs/Finger
# This finger definition is used for different sensors in the HandleSensors 
# message type.  

float32[] distal
float32[] proximal

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','motorHallEncoder','motorWindingTemp','airTemp','motorVelocity','motorHousingTemp','motorCurrent','fingerTactile','palmTactile','fingerSpread','proximalJointAngle','distalJointAngle','fingerAcceleration']
  _slot_types = ['Header','int32[4]','float32[4]','float32','int32[4]','float32[5]','float32[5]','handle_msgs/Finger[3]','float32[48]','int32','int32[3]','handle_msgs/Finger[3]','geometry_msgs/Vector3[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,motorHallEncoder,motorWindingTemp,airTemp,motorVelocity,motorHousingTemp,motorCurrent,fingerTactile,palmTactile,fingerSpread,proximalJointAngle,distalJointAngle,fingerAcceleration
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(HandleSensors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.motorHallEncoder is None:
        self.motorHallEncoder = [0,0,0,0]
      if self.motorWindingTemp is None:
        self.motorWindingTemp = [0.,0.,0.,0.]
      if self.airTemp is None:
        self.airTemp = 0.
      if self.motorVelocity is None:
        self.motorVelocity = [0,0,0,0]
      if self.motorHousingTemp is None:
        self.motorHousingTemp = [0.,0.,0.,0.,0.]
      if self.motorCurrent is None:
        self.motorCurrent = [0.,0.,0.,0.,0.]
      if self.fingerTactile is None:
        self.fingerTactile = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      if self.palmTactile is None:
        self.palmTactile = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.fingerSpread is None:
        self.fingerSpread = 0
      if self.proximalJointAngle is None:
        self.proximalJointAngle = [0,0,0]
      if self.distalJointAngle is None:
        self.distalJointAngle = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      if self.fingerAcceleration is None:
        self.fingerAcceleration = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
    else:
      self.header = std_msgs.msg._Header.Header()
      self.motorHallEncoder = [0,0,0,0]
      self.motorWindingTemp = [0.,0.,0.,0.]
      self.airTemp = 0.
      self.motorVelocity = [0,0,0,0]
      self.motorHousingTemp = [0.,0.,0.,0.,0.]
      self.motorCurrent = [0.,0.,0.,0.,0.]
      self.fingerTactile = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      self.palmTactile = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.fingerSpread = 0
      self.proximalJointAngle = [0,0,0]
      self.distalJointAngle = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      self.fingerAcceleration = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_4i.pack(*self.motorHallEncoder))
      buff.write(_struct_4f.pack(*self.motorWindingTemp))
      buff.write(_struct_f.pack(self.airTemp))
      buff.write(_struct_4i.pack(*self.motorVelocity))
      buff.write(_struct_5f.pack(*self.motorHousingTemp))
      buff.write(_struct_5f.pack(*self.motorCurrent))
      for val1 in self.fingerTactile:
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.distal))
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.proximal))
      buff.write(_struct_48f.pack(*self.palmTactile))
      buff.write(_struct_i.pack(self.fingerSpread))
      buff.write(_struct_3i.pack(*self.proximalJointAngle))
      for val1 in self.distalJointAngle:
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.distal))
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.proximal))
      for val1 in self.fingerAcceleration:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.motorHallEncoder = _struct_4i.unpack(str[start:end])
      start = end
      end += 16
      self.motorWindingTemp = _struct_4f.unpack(str[start:end])
      start = end
      end += 4
      (self.airTemp,) = _struct_f.unpack(str[start:end])
      start = end
      end += 16
      self.motorVelocity = _struct_4i.unpack(str[start:end])
      start = end
      end += 20
      self.motorHousingTemp = _struct_5f.unpack(str[start:end])
      start = end
      end += 20
      self.motorCurrent = _struct_5f.unpack(str[start:end])
      self.fingerTactile = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = struct.unpack(pattern, str[start:end])
        self.fingerTactile.append(val1)
      start = end
      end += 192
      self.palmTactile = _struct_48f.unpack(str[start:end])
      start = end
      end += 4
      (self.fingerSpread,) = _struct_i.unpack(str[start:end])
      start = end
      end += 12
      self.proximalJointAngle = _struct_3i.unpack(str[start:end])
      self.distalJointAngle = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = struct.unpack(pattern, str[start:end])
        self.distalJointAngle.append(val1)
      self.fingerAcceleration = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fingerAcceleration.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.motorHallEncoder.tostring())
      buff.write(self.motorWindingTemp.tostring())
      buff.write(_struct_f.pack(self.airTemp))
      buff.write(self.motorVelocity.tostring())
      buff.write(self.motorHousingTemp.tostring())
      buff.write(self.motorCurrent.tostring())
      for val1 in self.fingerTactile:
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.distal.tostring())
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.proximal.tostring())
      buff.write(self.palmTactile.tostring())
      buff.write(_struct_i.pack(self.fingerSpread))
      buff.write(self.proximalJointAngle.tostring())
      for val1 in self.distalJointAngle:
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.distal.tostring())
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.proximal.tostring())
      for val1 in self.fingerAcceleration:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.motorHallEncoder = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      start = end
      end += 16
      self.motorWindingTemp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 4
      (self.airTemp,) = _struct_f.unpack(str[start:end])
      start = end
      end += 16
      self.motorVelocity = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      start = end
      end += 20
      self.motorHousingTemp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      start = end
      end += 20
      self.motorCurrent = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=5)
      self.fingerTactile = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fingerTactile.append(val1)
      start = end
      end += 192
      self.palmTactile = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=48)
      start = end
      end += 4
      (self.fingerSpread,) = _struct_i.unpack(str[start:end])
      start = end
      end += 12
      self.proximalJointAngle = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=3)
      self.distalJointAngle = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.distalJointAngle.append(val1)
      self.fingerAcceleration = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fingerAcceleration.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f = struct.Struct("<f")
_struct_i = struct.Struct("<i")
_struct_48f = struct.Struct("<48f")
_struct_3i = struct.Struct("<3i")
_struct_3I = struct.Struct("<3I")
_struct_4i = struct.Struct("<4i")
_struct_4f = struct.Struct("<4f")
_struct_5f = struct.Struct("<5f")
_struct_3d = struct.Struct("<3d")
