"""autogenerated by genmsg_py from Collision.msg. Do not edit."""
import roslib.message
import struct


class Collision(roslib.message.Message):
  _md5sum = "ac44fce6d57e9e973d85368daf4a69ee"
  _type = "handle_msgs/Collision"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This is basic collision message
# it is used in HandleCollisions to build an array

string frame_id
# finger[0]/proximal_link
# finger[0]/distal_link
# finger[1]/proximal_link
# finger[1]/distal_link
# finger[2]/proximal_link
# finger[2]/distal_link
# base_link

int32 sensor_id
# index of sensor

float32 intensity

# location of sensor on the surface of the finger in the link frame
float32 x
float32 y
float32 z

"""
  __slots__ = ['frame_id','sensor_id','intensity','x','y','z']
  _slot_types = ['string','int32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       frame_id,sensor_id,intensity,x,y,z
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Collision, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.intensity is None:
        self.intensity = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
    else:
      self.frame_id = ''
      self.sensor_id = 0
      self.intensity = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i4f.pack(_x.sensor_id, _x.intensity, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.sensor_id, _x.intensity, _x.x, _x.y, _x.z,) = _struct_i4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i4f.pack(_x.sensor_id, _x.intensity, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.sensor_id, _x.intensity, _x.x, _x.y, _x.z,) = _struct_i4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i4f = struct.Struct("<i4f")
