#!/usr/bin/env python

from __future__ import print_function
import unittest
import rostest
import sys
import time
import rospy
import shutil
import os
import tempfile
import subprocess
from geometry_msgs.msg import Pose

LOGDIR = '/tmp/vrc_task_2'

class Tester(unittest.TestCase):

    def _grep(self, fname, string):
        fullpath = os.path.join(LOGDIR, fname)
        for line in open(fullpath, 'r'):
            if string in line:
                return True
        return False

    # This function isn't used right now; need to sort out the state.log
    # flushing problem before this can be reliably used.
    def _get_atlas_pose(self, fname):
        # Check the current robot pose, from the incomplete gazebo log
        # file. Not sure how robust this is.
        fullpath = os.path.join(LOGDIR, fname)
        while not os.path.exists(fullpath):
            print('Waiting for %s to exist'%(fullpath))
            time.sleep(0.5)
        tmp = tempfile.NamedTemporaryFile(delete=False)
        tmp.close()
        shutil.copyfile(fullpath, tmp.name)
        # Terminate our copy of the log file
        with open(tmp.name, 'a') as f:
            f.write('</gazebo_log>\n')
        # Use gzlog to extract the pose
        cmd = ['gzlog', 'echo', tmp.name, '-r', '--filter', 'atlas.pose']
        po = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
        out,err = po.communicate()
        # Take the last non-empty line
        pose = []
        for l in reversed(out.split('\n')):
            if len(l) > 0 and l[0] != ' ':
                pose = l.split()
                break
        self.assertTrue(len(pose) == 6)
        for i in range(len(pose)):
            pose[i] = float(pose[i])
        os.remove(tmp.name)
        return pose

    def test_scoring(self):
        pose_pub = rospy.Publisher('atlas/set_pose', Pose)
        pose = Pose()
        # Wait for subscribers to hook up
        time.sleep(3.0)

        # Teleport through first gate
        self.assertFalse(self._grep('score.log', 
          'Successfully passed through gate 0'))
	x_str, y_str, z_str = rospy.get_param("~pose_gate1").split(" ")
        pose.position.x = float(x_str)
        pose.position.y = float(y_str)
        pose.position.z = float(z_str)
        pose_pub.publish(pose)
        time.sleep(3.0)
        self.assertTrue(self._grep('score.log', 
          'Successfully passed through gate 0'))

        # Teleport through second gate
        self.assertFalse(self._grep('score.log', 
          'Successfully passed through gate 1'))
        pose.position.x = -0.03
        pose.position.y = -27.76
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        pose.position.x = 1.36
        pose.position.y = -19.71
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        self.assertTrue(self._grep('score.log', 
          'Successfully passed through gate 1'))

        # Teleport through third gate
        self.assertFalse(self._grep('score.log', 
          'Successfully passed through gate 2'))
        pose.position.x = 0.644
        pose.position.y = -7.35
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        self.assertTrue(self._grep('score.log', 
          'Successfully passed through gate 2'))

        # Teleport through fourth gate
        self.assertFalse(self._grep('score.log', 
          'Successfully passed through gate 3'))
        pose.position.x = 6.68
        pose.position.y = 4.44
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        pose.position.x = 7.00
        pose.position.y = 12.07
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        self.assertTrue(self._grep('score.log', 
          'Successfully passed through gate 3'))

        # Teleport through fifth gate
        self.assertFalse(self._grep('score.log', 
          'Successfully passed through gate 4'))
        pose.position.x = 6.30
        pose.position.y = 20.31
        pose.position.z = 1.00
        pose_pub.publish(pose)
        time.sleep(3.0)
        self.assertTrue(self._grep('score.log', 
          'Successfully passed through gate 4'))

if __name__ == '__main__':
    rospy.init_node('vrc_task_2_scoring_test', anonymous=True)
    try:
	LOGDIR = rospy.get_param('~logdir')
    except KeyError:
	rospy.loginfo("Use default value for logdir: " + LOGDIR)

    # Wait until /clock is being published; this can take an unpredictable
    # amount of time when we're downloading models.
    while rospy.Time.now().to_sec() == 0.0:
        print('Waiting for Gazebo to start...')
        time.sleep(1.0)
    # Take an extra nap, to allow plugins to be loaded
    time.sleep(5.0)
    print('OK, starting test.')

    rostest.run('atlas_utils', 'vrc_task_2_scoring_test', Tester, sys.argv)

